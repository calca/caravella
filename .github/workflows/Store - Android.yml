name: Android CI - Store

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  # Manual dispatch to build a production AAB for an arbitrary branch
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to build (staging APK)'
        required: true
        default: 'main'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          # If manually dispatched, use the selected branch; otherwise use the event ref (push/PR)
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target_branch || github.ref }}
      - name: Show build branch
        run: |
          echo "Building branch: $BRANCH"
        env:
          BRANCH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target_branch || github.ref_name }}
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Decode keystore from secret
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/upload-keystore.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      - name: Configure signing properties
        run: |
          echo "storeFile=upload-keystore.jks" > android/key.properties
          echo "storePassword=$KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Run tests
        run: flutter test
      - name: Build prod App Bundle (signed)
        run: flutter build appbundle --flavor prod --release --dart-define=FLAVOR=prod
      - name: Get app version
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //;s/\+.*//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Get current date
        id: get_date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Rename AAB
        run: |
          mv build/app/outputs/bundle/prodRelease/app-prod-release.aab io_caravella_egm-$VERSION-$DATE.aab
      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: io_caravella_egm-prod-aab
          path: io_caravella_egm-*.aab
